// { Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution {
public:
	vector<vector<int>>nearest(vector<vector<int>> mat)
    {
        int N = mat.size();
        int M = mat[0].size();
        
        int arr[1001][1001];
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<M;j++)
            arr[i][j]=INT_MAX;
        }
        
        queue<pair<int,int>>q;
        for(int i=0;i<mat.size();i++)
        {
            for(int j=0;j<mat[i].size();j++)
            {
                if(mat[i][j]==1)
                {
                    q.push({i,j});  // store where 1 is present;
                }
            }
        }
        
        int row_val[]={-1,1,0,0};
        int col_val[]={0,0,-1,1};
        int dis=0;
        while(!q.empty())
        {
            int size=q.size();
            for(int i=0;i<size;i++)
            {
                pair<int,int>p = q.front(); 
                q.pop();
                arr[p.first][p.second]=min(dis,arr[p.first][p.second]);
                for(int k=0;k<4;k++)
                {
                    int r = p.first + row_val[k];
                    int c = p.second + col_val[k];
                    if(r>=0 and r<N and c>=0 and c<M and arr[r][c]==INT_MAX)
                    {
                        q.push({r,c});
                    }
                }
                
                
                
            }
            dis++;
        }
        
        vector<vector<int>>vec(N,vector<int>(M,0));
        for(int i=0;i<N;i++)
        {
            for(int j=0;j<M;j++)
            {
                vec[i][j]=arr[i][j];
            }
        }
        
        return vec;
        
        }

};

// { Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n, m;
		cin >> n >> m;
		vector<vector<int>>grid(n, vector<int>(m, -1));
		for(int i = 0; i < n; i++){
			for(int j = 0; j < m; j++){
				cin >> grid[i][j];
			}
		}
		Solution obj;
		vector<vector<int>> ans = obj.nearest(grid);
		for(auto i: ans){
			for(auto j: i){
				cout << j << " ";
			}
			cout << "\n";
		}
	}
	return 0;
}  // } Driver Code Ends
